const jwt = require("jsonwebtoken");
const dotenv = require("dotenv");

dotenv.config();

module.exports = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  console.log("üì¢ Token ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", authHeader);
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return res.status(401).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (Invalid Token)" });
  }
  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret');
    console.log("‚úÖ Decoded Token:", decoded);
    req.user = decoded;
    next();
    console.log("‚úÖ ‡∏ú‡πà‡∏≤‡∏ô authMiddleware ‡πÅ‡∏•‡πâ‡∏ß");
  } catch (err) {
    console.log("‚ùå Token verify fail:", err);
    return res.status(401).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (Invalid Token)" });
      }
};